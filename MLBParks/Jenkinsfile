node('maven-appdev') {
  echo "GUID: ${GUID}"
  echo "CLUSTER: ${CLUSTER}"

  // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
  // You need to build the application in directory `ParksMap`.
  // Also copy "../nexus_settings.xml" to your build directory
  // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
  openshift.withCluster() {

    echo "${openshift.raw( "version" ).out}"
    echo "In project: ${openshift.project()}"

    // Checkout Source Code.
    stage('Checkout Source') {
      git url: 'https://github.com/cfoskin/appvdev_homework.git'
    }

    dir("MLBParks") {

      def groupId = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version = getVersionFromPom("pom.xml")
      // Set the tag for the development image: version + build number
      def devTag = "${version}-${BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = "${version}"
      echo " Dev TAG: ${devTag}"
      echo " Prod TAG: ${prodTag}"

      def mvnCmd = "mvn -s ./nexus_settings.xml"
      echo "mvnCmd: ${mvnCmd}"

      stage('Build war') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package -DskipTests"
      }
      stage('Unit Tests') {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
      }
      stage('Code Analysis') {
        echo "Running Code Analysis"
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.na39.openshift.opentlc.com -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }
      stage('Build and Tag OpenShift Image') {
        echo 'Build and Tag OpenShift Image'

        
      }
      stage('Publish to Nexus') {
        echo 'Publish to Nexus'
      }
      stage('Deploy to Dev') {
        echo 'Deploy to Dev'
      }
      stage('Integration Tests') {
        echo 'Integration Tests'
      }
      stage('Copy Image to Nexus Docker Registry') {
        echo 'Copy Image to Nexus Docker Registry'
      }
      stage('Blue/Green Production Deployment') {
        echo 'Blue/Green Production Deployment'
      }
      stage('Switch over to new Version') {
        echo 'Switch over to new Version'
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
