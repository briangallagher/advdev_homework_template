node('maven-appdev') {
  echo "GUID: ${GUID}"
  echo "CLUSTER: ${CLUSTER}"

  // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
  // You need to build the application in directory `ParksMap`.
  // Also copy "../nexus_settings.xml" to your build directory
  // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
  openshift.withCluster() {

    echo "${openshift.raw( "version" ).out}"
    echo "In project: ${openshift.project()}"

    // Checkout Source Code.
    stage('Checkout Source') {
      git url: 'https://github.com/briangallagher/advdev_homework_template.git'
    }

    dir("MLBParks") {

      def groupId = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version = getVersionFromPom("pom.xml")
      // Set the tag for the development image: version + build number
      def devTag = "${version}-${BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = "${version}"
      echo " Dev TAG: ${devTag}"
      echo " Prod TAG: ${prodTag}"

      def mvnCmd = "mvn -s ./nexus_settings.xml"
      echo "mvnCmd: ${mvnCmd}"

      stage('Build war') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package -DskipTests"
      }

      stage('Unit Tests') {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
      }

      stage('Code Analysis') {
        echo "Running Code Analysis"
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.na39.openshift.opentlc.com -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }

      stage('Build and Tag OpenShift Image') {
        echo 'Build and Tag OpenShift Image'

        openshift.withCluster() {
          openshift.withProject( '${GUID}-parks-dev' ) {

            // Start the binary build and print the logs to the jenkins console
            def buildSelector = openshift.selector( 'bc/mlbparks' ).startBuild('--from-file=./target/mlbparks.war')
            buildSelector.logs('-f')

            // Tagging the image here makes it available to in dev
            openshift.tag("${GUID}-parks-dev/mlbparks:latest", "${GUID}-parks-dev/mlbparks:${devTag}")         
          }
        }
      }

      stage('Publish to Nexus') {
        echo 'Publish to Nexus'
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus3.apps.na39.openshift.opentlc.com/repository/releases"
      }

      stage('Deploy to Dev') {
        echo 'Deploy to Dev'

        openshift.withCluster() {
          openshift.withProject( '${GUID}-parks-dev' ) {

            // Update the image in the deployment config 
            // Start a new deployment
            // Verify the deployment
              
            // 83ae-parks-dev

            openshift.set("image", "dc/mlbparks", "${GUID}-parks-dev/mlbparks:${devTag}", )
            // sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} -n ${GUID}-parks-dev"

            def dc = openshift.selector('dc', "mlbparks")
            // this will wait until the desired replicas are available
            def status = dc.rollout().status()

            // Verify that the service is running
            def connected = openshift.verifyService('mlbparks')
            if (connected) {
                echo "Able to connect to 'mlbparks' service"
            } else {
                echo "Unable to connect to 'mlbparks' service"
            }

// openshiftDeploy depCfg: 'mlbparks', namespace: 'e05e-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
// openshiftVerifyDeployment depCfg: 'mlbparks', namespace: 'e05e-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
// openshiftVerifyService namespace: 'e05e-parks-dev', svcName: 'mlbparks', verbose: 'false'

          }
        }
      }

      stage('Integration Tests') {
        echo 'Integration Tests'

        sleep 30

        // TODO: Will the tests fail if the curl fails? 
        // Should maybe grep here !! 
        // Maybe do assert ??

        //check health endpoint
        echo "Checking health endpoint"
        sh "curl -i -H 'Content-Length: 0' -X GET http://mlbparks.${GUID}-parks-dev.svc:8080/ws/healthz/"

        // checking info endpoint
        echo "Checking info endpoint"
        sh "curl -i -H 'Content-Length: 0' -X GET http://mlbparks.${GUID}-parks-dev.svc:8080/ws/info/"

      }

      stage('Copy Image to Nexus Docker Registry') {
        echo 'Copy Image to Nexus Docker Registry'

        // Why are we copying to Nexus at this point - seems to be just for archiving ???
        // 
        // "Oftentimes the pipeline needs to move the tested container image to another container registry, or another OpenShift cluster entirely, for deployment to production."
        // 
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/mlbparks:${devTag} docker://nexus-registry.${GUID}-nexus3.svc.cluster.local:5000/mlbparks:${devTag}"

        // Tag the image with the prod tag. Prod will pull the image from here and then tag in its own namespace once confirmed
        runInDevNs({openshift.tag("${GUID}-parks-dev/mlbparks:${devTag}", "${GUID}-parks-dev/mlbparks:${prodTag}")})

        // // TODO: should be in closure
        // openshift.withCluster() {
        //   openshift.withProject( '${GUID}-parks-dev' ) {

        //     // TODO: do a closure here.
        //     // Tag the image 
        //     openshift.tag("${GUID}-parks-dev/mlbparks:${devTag}", "${GUID}-parks-dev/mlbparks:${prodTag}")
        //   }
        // }
      }

      stage('Blue/Green Production Deployment') {
        echo 'Blue/Green Production Deployment'
      }

      stage('Switch over to new Version') {
        echo 'Switch over to new Version'
      }
    }
  }
}

def runInDevNs(func) {
  echo "Running in ${GUID}-parks-dev ... "
  openshift.withCluster() {
    openshift.withProject( '${GUID}-parks-dev' ) {
      func.call()
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
